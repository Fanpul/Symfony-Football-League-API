# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    secretJWT: '%env(APP_SECRET)%'
    algorithmJWT: '%env(algorithmJWT)%'
    tokenExpireDays: '%env(tokenExpireDays)%'
    refreshTokenExpireDays: '%env(refreshTokenExpireDays)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    jwt_encoder:
        class: App\Service\JwtEncoder
        public: true
        arguments: ["@service_container"]

    token_authenticator:
        class: App\Security\TokenAuthenticator
        arguments: ['@jwt_encoder', '@doctrine.orm.entity_manager']

    guard_authenticator:
        class: App\Security\GuardAuthenticator
        arguments: ['@security.password_encoder']

    get_set_method_normalizer:
        class: Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer
        public: false
        tags: [serializer.normalizer]

    app.action_listener:
        class: App\EventListener\CorsListener
        arguments: []
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }

    user_service:
        class: App\Service\UserService
        public: true
        arguments: ['@doctrine.orm.entity_manager', '@jwt_encoder']

    team_service:
        class: App\Service\TeamService
        public: true
        arguments: ['@doctrine.orm.entity_manager']

    league_service:
        class: App\Service\LeagueService
        public: true
        arguments: ['@doctrine.orm.entity_manager']

    validation.user_service:
        class: App\Service\Validation\UserValidation
        public: true
        arguments: ['@jwt_encoder']

    validation.team_service:
        class: App\Service\Validation\TeamValidation
        public: true

    # Service

    App\Service\Search\TeamSearchEngine:
        arguments: ['@App\Repository\TeamRepository']
        calls:
#            - [addQueryPart, ['@App\Service\Search\Filters\Limit']]
#            - [addQueryPart, ['@App\Service\Search\Filters\Offset']]
            - [addQueryPart, ['@App\Service\Search\Filters\League']]

    App\Service\Search\LeagueSearchEngine:
        arguments: ['@App\Repository\LeagueRepository']
        calls:
#            - [addQueryPart, ['@App\Service\Search\Filters\Limit']]
#            - [addQueryPart, ['@App\Service\Search\Filters\Offset']]
        - [addQueryPart, ['@App\Service\Search\Filters\League\Name']]

    Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer:
        arguments:
            - '@serializer.mapping.class_metadata_factory'
            - '@serializer.name_converter.camel_case_to_snake_case'
#            - '@property_info.reflection_extractor'
#            - '@serializer.mapping.class_discriminator_resolver'
        tags:
            - { name: serializer.normalizer, priority: -995 }

    # ParamConverter

    App\ParamConverter\RequestQueryModelParamConverter:
        arguments: ['@Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer']
        tags:
            - { name: request.param_converter }

    App\ParamConverter\InputModelParamConverter:
        arguments: ['@serializer', '@validator']
        tags:
            - { name: request.param_converter }

    # EventListener

    App\EventListener\KernelExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\EventListener\EntityValidationExceptionListener:
        tags:
        - { name: kernel.event_listener, event: kernel.exception, priority: 16 }

    # Factory

    app.factory.paginated_result.team:
        class: App\Factory\PaginatedResultFactory
        arguments: ['@App\DataTransformer\TeamTransformer']

    app.factory.paginated_result.league:
        class: App\Factory\PaginatedResultFactory
        arguments: ['@App\DataTransformer\LeagueTransformer']


    # Manager

    App\Manager\TeamManager:
        tags:
            - { name: 'container.service_subscriber', id: 'app.factory.paginated_result.team' }

    App\Manager\LeagueManager:
        tags:
            - { name: 'container.service_subscriber', id: 'app.factory.paginated_result.league' }